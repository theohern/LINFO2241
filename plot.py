import numpy as np
import matplotlib.pyplot as plt
import scipy.linalg

Flag = "ER"

if (Flag == "mult"):
    x = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700,1800, 1900, 2000]
    y = [6.5, 10.5, 17.24, 17.55, 24.32, 35.76, 52.43, 73.05, 95.21,103.14 , 129.59]
    y2 = [3.54, 4.46, 6.48, 6.76, 9.92, 12.63, 13.65, 23.51, 32.07, 33.71, 47.65]
    plt.figure()
    plt.title("time compared to the type of multiplication for C = A x B")
    plt.xlabel("size of matrix")
    plt.ylabel("time (s)")

    plt.plot(x, y, label="line * column")
    plt.plot(x, y2, label="line * line")
    plt.gca().legend(('line * column','line * line'))
    plt.show()

if (Flag == "result"):
    x = [50,100,150,200,250,300,350]
    y = [4.07, 8.24, 10.05, 16.26, 20.32, 24.72, 37.59]
    y2 = [2.27, 4.25, 7.04, 7.51, 10.16, 13.35, 19.06]
    plt.figure()
    plt.title("comparison between Phase1 and Phase2")
    plt.xlabel("rate (1/s)")
    plt.ylabel("time (s)")
    plt.plot(x, y)
    plt.plot(x, y2)
    plt.gca().legend(('phase 1','phase 2'))
    plt.show()


if (Flag == "file"):
    x = [16, 256, 4096, 128*128,65536,512*512,850*850, 950*950, 1024*1024]
    y = [0.02, 0.02,0.02,0.03,0.54, 0.79, 8.95,11.55, 13.14]
    plt.figure()
    plt.title("time compared to the size of the file")
    plt.xlabel("size of the file")
    plt.ylabel("time (s)")
    plt.plot(x, y)
    plt.show()


if (Flag == "nthreads"):
    x = [1, 2, 3, 4]
    y = [44.12, 45.68, 42.64, 46.47]
    plt.figure()
    plt.title("time compared to number of threads")
    plt.xlabel("number of threads")
    plt.ylabel("time (s)")
    plt.plot(x, y)
    plt.show() 


if (Flag == "phase3"):
    file = open("time.txt", 'r')
    ybis = file.readlines()
    x = [16,32,64,128,256,512,1024]
    plt.title("Request latency for rate 4 and time 5")
    plt.xlabel("size of the files")
    plt.ylabel("time (ms)")
    y = np.zeros(len(ybis))
    for i in range(len(ybis)):
        y[i] = int(ybis[i][:-1])
        y[i] = y[i]/1000
    plt.plot(x, y[0:7], label="server without SIMD")
    plt.plot(x, y[7:14], label="server with SIMD")
    plt.legend()
    #plt.gca().legend(('line * column','line * line'))
    #plt.show()
    plt.savefig("graph.png")



if (Flag == "ran_expo"):
    x = []
    for i in range(399):
        x.append(i+1)
    y = [501507, 764157, 533889, 606604, 44017, 68050, 208858, 40677, 89707, 64893, 90109, 37815, 55408, 217239, 165284, 63113, 74315, 8482, 49150, 821, 13249, 6709, 70893, 7100, 20496, 5346, 4266, 244106, 8490, 23978, 58937, 29637, 10637, 29849, 21226, 18899, 97395, 9106, 37835, 18703, 35836, 12171, 51657, 7570, 9657, 35844, 53481, 1506, 60864, 14930, 1764, 4104, 20534, 40914, 7801, 1184, 354, 10550, 1104, 4536, 57834, 37498, 30210, 4846, 11938, 7126, 21315, 10566, 15967, 10834, 564, 7994, 36792, 36093, 17018, 4401, 17421, 13097, 5532, 14553, 2240, 7073, 25552, 21038, 4717, 3023, 25728, 4901, 13039, 34825, 9761, 11640, 21039, 6159, 27122, 5293, 17382, 11762, 24432, 6587, 2407, 29419, 24537, 1536, 20277, 9666, 5285, 8949, 3027, 14016, 3309, 5289, 2268, 1821, 2811, 7008, 4604, 1575, 19941, 907, 1113, 5607, 11618, 33736, 21867, 9154, 3804, 10823, 3565, 2679, 2017, 6653, 2107, 1233, 9757, 985, 11513, 1298, 9832, 553, 21261, 379, 5155, 1346, 1893, 10948, 8974, 7221, 22977, 6800, 9443, 645, 947, 4768, 525, 464, 1458, 3916, 10773, 5323, 8750, 329, 1053, 72894, 1385, 13294, 802, 36421, 328, 12025, 439, 24, 14825, 5178, 1136, 1011, 2808, 13719, 9570, 2471, 4442, 4759, 3292, 6319, 567, 4068, 7571, 1929, 25699, 4527, 10997, 7174, 5136, 185, 7064, 9138, 13174, 10432, 8935, 19420, 6775, 11568, 20247, 5388, 3354, 869, 8560, 10566, 383, 4995, 1351, 4683, 1221, 5635, 1772, 1845, 1212, 353, 4578, 1150, 4764, 3219, 15949, 1466, 3510, 5621, 529, 2796, 3920, 12556, 2595, 1767, 8076, 2436, 13, 1792, 3850, 7526, 1114, 4689, 2736, 2717, 1497, 5102, 822, 3952, 168, 2154, 4781, 4482, 4044, 1691, 806, 3698, 3869, 5125, 1548, 5227, 872, 9758, 4423, 4041, 1130, 2879, 346, 1134, 7860, 4323, 365, 436, 1656, 3160, 3294, 4008, 1239, 5416, 1228, 1438, 754, 14850, 12, 6229, 1422, 734, 2012, 11137, 8754, 5026, 4155, 445, 3978, 1658, 5079, 9746, 8407, 6688, 766, 5296, 2656, 1176, 7817, 7960, 6835, 2267, 2814, 580, 1042, 6491, 2194, 2009, 6077, 2195, 1098, 633, 3658, 4114, 472, 2905, 2125, 5690, 4013, 609, 777, 2130, 397, 456, 1366, 1197, 8166, 7246, 2939, 5460, 5118, 2051, 1217, 1492, 3191, 2777, 883, 482, 220, 333, 3037, 1313, 985, 1163, 275, 1601, 7809, 2502, 878, 3054, 4063, 1887, 482, 6027, 2752, 2036, 649, 2265, 1538, 4893, 1381, 769, 1080, 3570, 2773, 11384, 1118, 6158, 394, 1421, 14, 4088, 3970, 924, 323, 5308, 3368, 132, 1564, 11263, 3213, 616, 1668, 5191, 254, 270, 1240, 921, 2737, 4224, 359, 134, 138, 1545, 3823, 2959, 1464]
    plt.title("value for the function ran_expo")
    plt.xlabel("number of threads")
    plt.ylabel("time (s)")
    plt.plot(x, y)
    plt.show() 

if (Flag == "ER"):
    x = []
    for i in range(11):
        x.append(i+1)
    y = [3505.32, 3517.65, 3530.08, 3542.58, 3555.18, 3567.86, 3580.63, 3593.60, 3606.46, 3619.52, 0]
    ybis = [3493, 3413, 3201, 3295, 3561, 3835, 3646, 3891, 3646, 3735, 3800]
    plt.title("value for the function ran_expo")
    plt.xlabel("number of threads")
    plt.ylabel("time (s)")
    plt.plot(x, y)
    plt.plot(x, ybis)
    plt.show() 
